(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{489:function(a,t,e){"use strict";e.r(t);var s=e(2),i=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"day-1-intro-to-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#day-1-intro-to-javascript"}},[a._v("#")]),a._v(" Day 1 - INTRO TO JAVASCRIPT")]),a._v(" "),e("p",[a._v("What is Scope ?")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("    Scope in JavaScript refers to the accessibility or visibility of variables. That is, which parts of a program have access to the variable or where the variable is visible.\n")])])]),e("p",[a._v("What is Hoisting ?")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("    Hoisting is JavaScript's default behavior of moving declarations to the top.\n")])])]),e("p",[a._v("In what cases might you use let vs const vs var?")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("    VAR declarations are globally scoped\n    let and const are block scoped. var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared. Const won't let you change the value.")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);